openapi: 3.0.3
info:
  title: Simplified login API specification
  description: |-
    Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any
    image (even those uploaded by themself). Only authors can remove their comments.
    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about
    Alice. Alice can decide to remove the ban at any moment.
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse
    chronological order), how many photos have been uploaded, and the user’s followers and following.
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    Removal of an image will also remove likes and comments.
    A user can search other user profiles via username.
    A user can log in just by specifying the username.
  version: "1"
servers: ["https://example.com"]
tags:
  - name: login
    description: User login
  - name: profile
    description: User profile
  - name: Photo actions
    description: Photo actions
  - name: User actions
    description: User actions
  - name: stream
    description: Stream
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginSchema"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"

  /user/changeusername:
    patch:
      security:
        - bearerAuth: []
      tags: ["profile"]
      summary: Changes the user name
      description: |-
        Once logged in, the user can change its name with this endpoint.
      operationId: setMyUserName
      requestBody:
        $ref: "#/components/requestBodies/UserNameChange"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /upload:
    post:
      security:
        - bearerAuth: []
      tags: ["Photo actions"]
      summary: Upload a photo
      description: |-
        Upload an image file to the server, which will be stored in the user's profile.
      operationId: uploadPhoto
      requestBody:
        description: New user name
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoUploadSchema"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /photo/{postid}:
    delete:
      security:
        - bearerAuth: []
      tags: ["Photo actions"]
      summary: Delete a photo
      description: |-
        Deletes a photo, given the post identifier.
      operationId: deletePhoto
      parameters:
        - name: postid
          in: path
          required: true
          description: The unique identifier of the post you want to delete.
          schema:
            $ref: "#/components/schemas/UserString"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/following/{uid}:
    put:
      security:
        - bearerAuth: []
      tags: ["User actions"]
      summary: Follow a user
      description: |-
        Follows a user, given the user name.
      operationId: followUser
      parameters:
        - name: uid
          in: path
          required: true
          description: The unique identifier of the user you want to follow.
          schema:
            $ref: "#/components/schemas/UserString"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      security:
        - bearerAuth: []
      tags: ["User actions"]
      summary: Unfollow a user
      description: |-
        Unfollows a user, given the user name.
      operationId: unfollowUser
      parameters:
        - name: uid
          in: path
          required: true
          description: The unique identifier of the user you want to unfollow.
          schema:
            $ref: "#/components/schemas/UserString"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/blocked/{uid}:
    put:
      security:
        - bearerAuth: []
      tags: ["User actions"]
      summary: Block a user
      description: |-
        Blocks a user, given the user name.
      operationId: banUser
      parameters:
        - name: uid
          in: path
          required: true
          description: The unique identifier of the user you want to block.
          schema:
            $ref: "#/components/schemas/UserString"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      security:
        - bearerAuth: []
      tags: ["User actions"]
      summary: Unblock a user
      description: |-
        Unblocks a user, given the user name.
      operationId: unbanUser
      parameters:
        - name: uid
          in: path
          required: true
          description: The unique identifier of the user you want to block.
          schema:
            $ref: "#/components/schemas/UserString"
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/likes/{postid}:
    put:
      security:
        - bearerAuth: []
      tags: ["User actions"]
      summary: Like a post given its identifier
      description: |-
        Likes a post, given the post identifier.
      operationId: likePhoto
      parameters:
        - name: postid
          in: path
          required: true
          description: The unique identifier of the post you want to like.
          schema:
            type: integer
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      security:
        - bearerAuth: []
      tags: ["User actions"]
      summary: Unlike a post
      description: |-
        Unlikes a post, given the post identifier.
      operationId: unlikePhoto
      parameters:
        - name: postid
          in: path
          required: true
          description: The unique identifier of the post you want to unlike.
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /photo/{postid}/comments:
    post:
      security:
        - bearerAuth: []
      tags: ["Photo actions"]
      summary: Post a comment
      description: |-
        Comments under a post, given the post identifier.
      operationId: commentPhoto
      parameters:
        - name: postid
          in: path
          required: true
          description: The unique identifier of the post you want to comment.
          schema:
            type: integer
      requestBody:
        description: Comment text
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentSchema"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /photo/{postid}/comments/{commentid}:
    delete:
      security:
        - bearerAuth: []
      tags: ["Photo actions"]
      summary: Delete a comment.
      description: |-
        Deletes a comment, given the post identifier and the comment identifier.
      operationId: uncommentPhoto
      parameters:
        - name: postid
          in: path
          required: true
          description: The unique identifier of the post you want to delete a comment from.
          schema:
            type: integer
        - name: commentid
          in: path
          required: true
          description: The unique identifier of the comment you want to delete.
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{uid}:
    get:
      security:
        - bearerAuth: []
      tags: ["profile"]
      summary: Get user profile
      description: |-
        Returns the user profile, given the user name. If you are logged-in and the user has blocked you, the profile is not returned.
      operationId: getUserProfile
      parameters:
        - name: uid
          in: path
          required: true
          description: The unique identifier of the user you want to get the profile of.
          schema:
            $ref: "#/components/schemas/UserString"
      responses:
        "200":
          description: User profile
          content:
            application/json:
              example:
                user: Giovanni
                followers: []
                following: []
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/getstream:
    get:
      security:
        - bearerAuth: []
      tags: ["stream"]
      summary: Get stream
      description: |-
        Returns the stream of the user. Each item in the stream is a post, and contains the user name, the date, the text and the image.
      operationId: getMyStream
      responses:
        "200":
          description: User's stream retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStream"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  requestBodies:
    UserNameChange:
      description: Payload for changing the user's name
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserNameChange"
          examples:
            changeExample:
              value:
                name: "NewUsername"
              summary: Example payload to change username.

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    SuccessResponse:
      description: The request was successful
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessMessage"
          examples:
            successExample:
              value:
                message: "The request was successful"
              summary: Example success message.
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedMessage"
    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundMessage"
  schemas:
    UserStream:
      description: User stream
      type: object
      properties:
        stream:
          description: List of posts
          type: array
          maxItems: 50
          minItems: 1
          items:
            type: object
            properties:
              "postid":
                type: integer
                example: 123456789
                description: Unique identifier of the post
              "user":
                $ref: "#/components/schemas/UserString"
              "date":
                type: string
                format: date-time
                example: "2021-05-01T12:00:00Z"
                description: Date of the post
              "text":
                type: string
                maxLength: 300
                example: "Hello world!"
                description: Text of the post
              "image":
                type: string
                maxLength: 300
                example: "https://example.com/image.jpg"
                description: URL of the image
    UnauthorizedMessage:
      type: object
      properties:
        error:
          description: Error message
          type: string
          example: "Access token is missing or invalid"
      description: Access token is missing or invalid
    NotFoundMessage:
      type: object
      properties:
        error:
          type: string
          example: "The requested resource was not found"
      description: The requested resource was not found
    PhotoUploadSchema:
      description: Payload for uploading a photo
      type: object
      properties:
        image:
          type: string
          maxLength: 300
          example: "https://example.com/image.jpg"
          description: URL of the image
        text:
          type: string
          maxLength: 300
          example: "Hello world!"
          description: Text of the post
          minLength: 1
          pattern: ".*"
    UserNameChange:
      type: object
      properties:
        name:
          type: string
          example: Giovanni
          pattern: '.*\S.*'
          minLength: 3
          maxLength: 16
          description: New username to be set for the user.
      description: Payload for changing the user's name
    UserProfile:
      description: User profile
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserString"
        followers:
          type: array
          minItems: 0
          maxItems: 20000
          items:
            $ref: "#/components/schemas/UserString"
          description: List of followers
        following:
          type: array
          minItems: 0
          maxItems: 20000
          items:
            $ref: "#/components/schemas/UserString"
          description: List of users followed by this user
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "The request was successful"
          description: A generic success message.
      description: A generic success message.
    UserString:
      type: string
      example: Giovanni
      pattern: '.*\S.*'
      minLength: 3
      maxLength: 16
      description: A user identifier

    CommentSchema:
      type: object
      description: Comment text
      properties:
        text:
          $ref: "#/components/schemas/CommentString"

    CommentString:
      type: string
      example: "Hello world!"
      pattern: '.*\S.*'
      minLength: 1
      maxLength: 256
      description: A comment text string

    LoginSchema:
      type: object
      properties:
        name:
          type: string
          example: Maria
          pattern: '.*\S.*'
          minLength: 3
          maxLength: 16
          description: User name
      description: User name
